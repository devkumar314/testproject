# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code from the repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: List directory contents to verify the structure
    - name: List directory contents
      run: ls -la
      
    # Step 3: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

        # Step 3: Cache Allure results and history
    - name: Cache Allure results and history
      uses: actions/cache@v3
      with:
        path: |
          allure-results
          allure-report/history
        key: ${{ runner.os }}-allure-results-${{ github.sha }}

    # Step 4: Run tests and generate Allure results
    - name: Run tests with Maven
      run: |
        cd CucumberProject
        mvn clean test
        continue-on-error: true  # Ensure the workflow continues even if tests fail

    # Step 5: Merge Allure history from previous runs
    - name: Merge Allure history
      if: always()  # This ensures the report is generated even if tests fail
      run: |
        mkdir -p allure-results/history
        cp -r allure-report/history/* allure-results/history/ || true

    # Step 6: Generate Allure report with history
    - name: Generate Allure report
      run: |
        mvn allure:report

    # Step 7: Upload Allure report artifacts
    - name: Upload Allure report
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: target/site/allure-maven/

    # Step 8: Deploy Allure report using GitHub Pages (Optional)
    - name: Deploy Allure report to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/site/allure-maven/
